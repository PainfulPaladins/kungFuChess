#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   http://haproxy.1wt.eu/download/1.4/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    stats socket /var/lib/haproxy/stats level admin

#cache longcache
#    total-max-size 200    # MB
#    max-object-size 10000 # bytes
#    max-age 600           # seconds

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          30s
    timeout server          20s
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# main frontend which proxys to the backends
#---------------------------------------------------------------------
#frontend  main *:5000
#    acl url_static       path_beg       -i /static /images /javascript /stylesheets
#    acl url_static       path_end       -i .jpg .gif .png .css .js
#
#    use_backend static          if url_static
#    default_backend             app
#
frontend http-in
    # listen 80
    bind *:80
    bind *:443 ssl crt /etc/ssl/existentialcomics.com/existentialcomics.com.pem

    redirect scheme https code 301 if !{ ssl_fc }

    acl is_static hdr_beg(host) -i static
    acl is_static path_beg      /static
    # any static condition 

    acl varnish_up nbsrv(varnish) ge 1
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    acl host_kfc hdr(host) -i www.kungfuchess.org kungfuchess.org
    acl host_kfc_ws hdr(host) -i ws.kungfuchess.org

    use_backend letsencrypt-backend if letsencrypt-acl
    use_backend varnish if is_static varnish_up
    use_backend static if is_static
    use_backend kungfuchess if host_kfc
    use_backend kungfuchess_ws if host_kfc_ws
    default_backend    existentialcomics_app

    # send X-Forwarded-For header
    option             forwardfor

frontend varnish-listener
    bind 127.0.0.1:8000
    use_backend static

#---------------------------------------------------------------------
# static backend for serving up images, stylesheets and such
#---------------------------------------------------------------------
#backend static
#    balance     roundrobin
#    server      static01 159.203.127.18:80 check

#---------------------------------------------------------------------
# round robin balancing between the various backends
#---------------------------------------------------------------------
backend existentialcomics_app
    option httpchk GET /
    option forwardfor
    http-check expect status 200
    default-server inter 3s fall 3 rise 2

    balance roundrobin
    server  www01 167.99.233.59:80 check inter 2000
    server  www02 167.99.233.177:80 check inter 2000

backend kungfuchess_ws
    option httpchk GET /
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    option forwardfor

    balance roundrobin
    #server  www01 ws1.kungfuchess.org:3000 check inter 2000 backup
    server  www02 ws20.kungfuchess.org:3000 check inter 2000

backend kungfuchess
    option httpchk GET /
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    option forwardfor

    balance roundrobin
    server  www01 167.99.233.59:80 check inter 2000
    server  www02 167.99.233.177:80 check inter 2000
    server  www03 167.99.233.59:8080 check inter 2000
    server  www04 167.99.233.177:8080 check inter 2000

backend static
    option httpchk GET /
    http-check expect status 200
    default-server inter 3s fall 3 rise 2
    option forwardfor

    balance roundrobin
    server  www01 167.99.233.59:80 check inter 2000
    server  www02 167.99.233.177:80 check inter 2000

backend varnish
    mode http
    balance uri # in latest HAProxy version, one can add 'whole' keyword

    # Varnish must tell it's ready to accept traffic
    option httpchk HEAD /varnishcheck
    http-check expect status 200

    # client IP information
    option forwardfor

    # avoid request redistribution when the number 
    #of caches changes (crash or start up)
    hash-type consistent

    server varnish-cache 127.0.0.1:6081 check maxconn 1000

# LE Backend
backend letsencrypt-backend
    server letsencrypt 127.0.0.1:8888

# admin
# Stats interface
listen  lb_stats *:9999
    mode    http
    balance roundrobin
    stats   uri /ha_stats
    stats   realm "HAProxy Stats"
